#!/usr/bin/env node

'use strict';

var fs = require('fs'),
    path = require('path'),
    toolkit = require('commander'),
    project = require('./package.json'),
    manifest = require('./manifest.json'),
    // Tasks & Helpers
    log = require('./tasks/helpers/log'),
    lintJs = require('./tasks/lint-js'),
    buildJs = require('./tasks/build-js'),
    buildCss = require('./tasks/build-css'),
    generateGraph = require('./tasks/helpers/generateGraph'),
    promise = null;

function task(action) {
    return function() {
        promise = action.apply(null, arguments);
    };
}

toolkit.package = project;
toolkit.manifest = manifest;
toolkit
    .version(project.version)
    .description(project.description)
    .option('-j, --js <path>', 'JavaScript source path', './js-es6')
    .option('-c, --css <path>', 'CSS source path', './scss-3.0')
    .option('-o, --out <path>', 'Output build path', './build')
    .option('--namespace <value>', 'Namespace to prepend to all CSS classnames')
    .option('--rtl', 'Enable right-to-left mode', false)
    .option('--debug', 'Enable debug mode', false)
    .option('--modules <list>', 'Filter which modules to include in the output', function(value) {
        return value.split(',');
    }, Object.keys(manifest));

toolkit
    .command('lint')
    .description('Lint both JavaScript and CSS files')
    .action(function() {
        promise = Promise.all([
            lintJs([toolkit.js], toolkit)
        ]);
    });

toolkit
    .command('lint:js')
    .description('Lint JavaScript source and test files')
    .action(function() {
        promise = lintJs([
            toolkit.js,
            toolkit.js.replace('js', 'tests'),
            './tasks'
        ], toolkit);
    });

toolkit
    .command('build')
    .description('Transpile both JavaScript and CSS files')
    .action(function() {
        promise = Promise.all([
            buildJs([], toolkit),
            buildCss([], toolkit)
        ]);
    });

toolkit
    .command('build:js')
    .description('Transpile ES6 JavaScript to ES5')
    .action(task(buildJs));

toolkit
    .command('build:css')
    .description('Transpile Sass to CSS')
    .action(task(buildCss));

// Execute command
toolkit.parse(process.argv);

// Display help menu if no command provided
if (!toolkit.args.length) {
    toolkit.help();
}

// Handle the result of a command action
if (promise instanceof Promise) {
    promise
        .then(function() {
            console.log('DONE');
            process.exit(0);
        })
        .catch(function(error) {
            console.error(error.message);
            process.exit(1);
        });
}
